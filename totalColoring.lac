

func zero(x){
    x = 0;
    return;
}

func one(x){
    x = 1;
    return;
}

func incr(x){
    x = x + 1;
    return;
}

func modulus (x , y , out ) {
    out = x;
    while ( out >= y ) {
        out = out - y;
    }
    return;
}

func pow(b, e, result,i){

    one(result);
    if (e == 0) {
        result = 1;
        return;
    }
    if ( e== 1){
        result = b;
        return;
    }
    one(i);
    while ( i <= e){

        result = result * b;
        incr(i);
    }
    return;
}   

func fill_n(l , i , length, value){

    zero(i);
    l =[];
    while ( i < length){
        l = l ^ value;
        incr(i);
    }
    return;
}

  
/* inserts value at position i in the list l*/
func insertAt(l, copy, element, value, length, j ,i){
    copy = [];
    zero(j);
    length = #l;
    if ( i >= length){
        return;
    }
    while ( j < i){
        element = l@j;
        copy = copy ^ element;
        incr(j);
    }
    copy = copy ^ value;
    incr(j);
    while ( j < length){
        element = l@j;
        copy = copy ^ element;
        incr(j);
    }
    l = copy;
    return;

}
/* inserts value(list) at position i in the list2 l*/
func insertAt2(l, copy, element, value, length, j ,i){
    copy = [];
    zero(j);
    length = #*l;
    if ( i >= length){
        return;
    }
    while ( j < i){
        element = l@*j;
        copy = copy ^* element;
        incr(j);
    }
    copy = copy ^* value;
    incr(j);
    while ( j < length){
        element = l@*j;
        copy = copy ^* element;
        incr(j);
    }
    l = copy;
    return;

}


func isUndirected(graph,holder,node,otherNode,value,i,k,size,valid){

    zero(i);
    size = #*graph;
    while (i <  size){
        holder = [];
        node = graph@*i;
        zero(k);
        while (k < size){
            otherNode = graph@*k;
            value = otherNode@i;
            holder = holder^value;
            incr(k);
        }
        if (holder != node){
            zero(valid);
            return;
        }
        incr(i);
    }
    one(valid);
    return;
}

func reverseVertices(edge, h, first , second, output){

    output = [];
    h = 0;
    first = edge@h;
    h = 1;
    second = edge@h;
    output = output ^ second;
    output = output ^ first;
    return;
}

/* return if edge is in edges*/
func containsEdge(edges , edge , i, length, iterator, output){

    zero(i);
    zero(output);
    length = #*edges;
    if (length == 0){
        return;
    }
    while ( i < length) {
        iterator = edges@*i;
        if (iterator == edge){
            one(output);
            return;
        }
        incr(i);
    }
    return;
}


/* get all edges of graph*/
func getEdges(graph,reverse, h, first , second , adjacentsVertices, adjacentVertex, edge , length , lengthContainer,iterator, lengthAdjacent, i, k, j, contained , edges){

    edges = [];
    length = #*graph;
    i = 0;
    j = 0;
    while ( i < length){
        adjacentsVertices = graph@*i;
        lengthAdjacent = #adjacentsVertices;
        while ( j < lengthAdjacent){
            edge = [];
            adjacentVertex = adjacentsVertices@j;
            edge = edge ^ i;
            edge = edge ^ adjacentVertex;
            reverseVertices(edge,h,first,second,reverse);
            containsEdge(edges, reverse, k, lengthContainer, iterator, contained); 
            if (contained == 0){
                edges = edges ^* edge;
            }
            incr(j);
        }
    zero(j);
    incr(i);

    }
    return;

}




/* return if vertex v is in vertices */
func containsVertex(vertices, v,i,length,item,contained){

    zero(contained);
    zero(i);
    length = #vertices;
    while ( i <  length){
        item = vertices@i;
        if (v == item){
            one(contained);
            return;
        }
        incr(i);
    }
    return;
}

/* creates adjacency list from adjacency matrix*/
func adjacencyMatrixToAdjacencyList(matrix,graph, vertex, newVertex, i,j,length,isAdjacent){

    graph = [];
    newVertex = [];
    zero(i);
    length = #*matrix;
    while ( i < length){
        newVertex = [];
        vertex = matrix@*i;
        zero(j);
        while ( j < length){
            isAdjacent = vertex@j;
            if (isAdjacent){
                newVertex = newVertex^j;
            }
            incr(j);
        }
        graph = graph^*newVertex;
        incr(i);
    }
    return;

}


/* iterates over all (undirected) adjacency matrices of n nodes */
func generateAdjacencyMatrices(allMatrices,n,matrix,holder,node,otherNode,value,i,j,c,zero,counter,y,e,max,out,k,size,copy,copy2,element,element2,length,valid){


    allMatrices = [];
    zero(zero);
    y = 2;
    e = n*n - n;
    pow(y, e, max,i);
    one(counter);
    while ( counter  < max){
        c = counter;
        zero(i);
        matrix = [];
        node = [];
        fill_n(node , i , n, zero);
        zero(i);
        while (i < n){
            matrix = matrix^*node;
            incr(i);
        }
        zero(i);
        while ( i < n & c){
            fill_n(node , e , n, zero);
            zero(j);
            while (j<n & c){
                if (j!=i){
                    modulus(c , y , out) ;
                    insertAt(node, copy, element, out, length, k ,j);
                    c = c / 2;       
                }
              incr(j);
            }
            insertAt2(matrix, copy2, element2, node, length, j ,i);
            incr(i);
        }

        zero(valid);
        isUndirected(matrix,holder,node,otherNode,value,i,k,size,valid);
        if(valid){
          print matrix;
          allMatrices = allMatrices^*matrix;
        }
        incr(counter);
    }
    return;
}


/* returns the corresponding total graph of graph*/
func createTotalGraph(graph, edges, totalGraph,reverse, h, first , second , element, item, adjacents, adjacentsVertices,vertexAsList,rawVertices, vertices, adjacentVertex, edge , length , otherLength, lengthElement, lengthContainer,iterator, lengthAdjacent, i, k, j, contained ,contained1, contained2 ){

    getEdges(graph,reverse, h, first , second , adjacentsVertices, adjacentVertex, edge , length , lengthContainer,iterator, lengthAdjacent, i, k, j, contained , edges);
    print edges;
    length = #*graph;
    zero(i);
    rawVertices = [];
    while ( i < length){
        vertexAsList = [];
        vertexAsList = vertexAsList ^ i;
        rawVertices = rawVertices^*vertexAsList;
        incr(i);
    }
    rawVertices = rawVertices||*edges;
    print rawVertices;
    totalGraph = [];
    length = #*rawVertices;
    print length;
    zero(i);
    while ( i < length){
        adjacentsVertices = [];
        element = rawVertices@*i;
        lengthElement = #element;
        if (lengthElement == 1){
            adjacents = graph@*i;
            lengthAdjacent = #adjacents;
            zero(j);
            while ( j < lengthAdjacent){
                element = adjacents@j;
                adjacentsVertices = adjacentsVertices^element;
                incr(j);
            }
            j = #*graph;
            while (j < length){
                edge = rawVertices@*j;
                containsVertex(edge, i,k,otherLength, item,contained);
                if (contained){
                    adjacentsVertices = adjacentsVertices^j;
                }
                incr(j);
            }

            totalGraph = totalGraph^*adjacentsVertices;

        }
        if (lengthElement == 2){
            zero(j);
            zero(h);
            first = element@h;
            one(h);
            second = element@h;
            while ( j < length){
                if (j!=i){
                vertices = rawVertices@*j;
                containsVertex(vertices, first,k,otherLength,item,contained1);
                containsVertex(vertices, second,k, otherLength,item,contained2);
                if ( contained1 | contained2){
                    adjacentsVertices = adjacentsVertices^j;
                }
                }
            incr(j);
            }
            totalGraph = totalGraph^*adjacentsVertices;
        }
        incr(i);
    }
  return;
  }



func check(graph,colors,k,i,adjacentsVertices, lengthAdjacent, neighbor, colorNode, colorNeighbor,valid){

    adjacentsVertices = graph@*k;
    lengthAdjacent = #adjacentsVertices;
    zero(i);
    while (i < lengthAdjacent){
        neighbor = adjacentsVertices@i;
            colorNeighbor = colors@neighbor;
            colorNode = colors@k;
            if (colorNeighbor == colorNode){
                zero(valid);
                return;
            }

        incr(i);
    }
    one(valid);
    return;
}



func maxGrad(graph,max,i,size,length,vertex){
    
    zero(max);
    zero(i);
    size = #*graph;
    while (i < size){
        vertex = graph@*i;
        length = #vertex;
        if (length > max){
            max = length;
        }
        incr(i);
    }
    return;
}

func graphColoring(graph,colors,m,n,k,j,i,flag1,flag2,flag3,found,clr,zero,copy,element,length,valid,adjacentsVertices,lengthAdjacent,neighbor,colorNeighbor,colorNode){

    n = #*graph;
    n = n -1;
    zero(found);

    zero(k);
    while(k>=0){
         zero(valid);
         zero(flag3);
        clr = colors@k;
        incr(clr);
        insertAt(colors,copy,element, clr,length, j,k);
        clr = colors@k;
        while(clr<=m & valid==0) {
            zero(valid);
            check(graph,colors,k,i,adjacentsVertices, lengthAdjacent, neighbor, colorNode, colorNeighbor,valid);
            if(valid){
                one(valid);
                flag3 = 1;
            }
            if (valid == 0){
            clr = colors@k;
            incr(clr);
            insertAt(colors,copy,element, clr,length, j,k);
           
            }   
        }

        clr = colors@k;
        zero(flag1);
        zero(flag2);
        if (clr<=m & k==n) {
            one(found);
            return;
        }
        if(clr<=m & k<n){
            incr(k);
            flag2=1;
        }
        if (flag1==0 & flag2==0) {
        zero(zero);
        insertAt(colors,copy,element, zero,length, j,k); 
        k = k - 1;
        }
    }
    return;
}


list2 graph;
list2 edges;
list2 totalGraph;
list2 matrix;
list2 allMatrices;
list2 rawVertices;
list2 copy2;

list element2;
list reverse;
list colors;
list edge;
list holder;
list node;
list otherNode;
list copy;
list holder;
list node;
list element;
list adjacents;
list adjacentsVertices;
list vertices;
list vertexAsList;
list otherNode;
list vertex;
list newVertex;

int m;
int c;
int v;
int V;
int h;
int value;
int first;
int second;
int item;
int length;
int lengthElement;
int lengthContainer;
int iterator;
int j;
int k;
int i;
int zero;
int otherLength;
int lengthAdjacent;
int adjacentVertex;
int vertexColor;
int neighbor;
int valid;
int contained;
int contained1;
int contained2;
int output;
int clr;
int n;
int y;
int e;
int max;
int size;
int out;
int element;
int length;
int valid;
int colorNeighbor;
int colorNode;
int found;
int flag1;
int flag2;
int flag3;
int size;
int value; 
int counter;
int totalColoringConjecture;
int numberMatrices;
int isAdjacent;
int f;
int upperBound;
int nodesNumber;

zero(zero);
colors = [];
copy = [];

nodesNumber = 2;
one(totalColoringConjecture);
while (totalColoringConjecture){
    print nodesNumber;
    generateAdjacencyMatrices(allMatrices,nodesNumber,matrix,holder,node,otherNode,value,i,j,c,zero,counter,y,e,max,out,k,size,copy,copy2,element,element2,length,valid);
    print allMatrices;
    numberMatrices = #*allMatrices;
    zero(f);
        while (f < numberMatrices & totalColoringConjecture){
            matrix = allMatrices@*f;
            print matrix;
            adjacencyMatrixToAdjacencyList(matrix,graph, vertex, newVertex, i,j,length,isAdjacent);
            print graph;
                createTotalGraph(graph, edges, totalGraph,reverse, h, first , second , element, item, adjacents, adjacentsVertices,vertexAsList,rawVertices, vertices,adjacentVertex, edge , length , otherLength, lengthElement, lengthContainer,iterator, lengthAdjacent, i, k, j, contained ,contained1, contained2);
                print totalGraph;
                zero(m);
                zero(found);
                length = #*totalGraph;
                fill_n(colors,i,length,zero);
                while (!found){
                    incr(m);
                    graphColoring(totalGraph,colors,m,n,k,j,i,flag1,flag2,flag3,found,clr,zero,copy,element,length,valid,adjacentsVertices,lengthAdjacent,neighbor,colorNeighbor,colorNode);
                }
                print graph;
                print m;
                print colors;
                print found;
                if (found) {
                    maxGrad(graph,max,k,size,length,vertex);
                    upperBound = max + 2;
                    print upperBound;
                    if ( m > upperBound){
                        zero(totalColoringConjecture);
                    }
                }
            incr(f);
        }
    print nodesNumber;
    incr(nodesNumber);
}

halt;